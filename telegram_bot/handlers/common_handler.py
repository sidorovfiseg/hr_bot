from aiogram import types
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram import F
import os
from aiogram.utils.keyboard import InlineKeyboardBuilder
from telegram_bot.states.user_state import UserState
from telegram_bot.routers.default_routers import default_router as router
from telegram_bot.keyboards.restart import restart_kb 
from telegram_bot.keyboards.cancel_generation import cg_kb
from telegram_bot.keyboards.menu import menu_kb
from telegram_bot.keyboards.get_back import return_kb 
from ml.answer import get_c
from telegram_bot.utils.split import split_text
import telegram_bot.callbacks.default_callbacks



# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã —Å—Ç–∞—Ä—Ç–∞ –±–æ—Ç–∞

@router.message(Command("start"))
async def start_bot(msg: Message, state: FSMContext):
    await state.set_state(UserState.menu_state)
    await msg.answer(text="–ü—Ä–∏–≤–µ—Ç üñêÔ∏è. –¢—ã –º–æ–∂–µ—à—å –ø–æ–º–æ—á—å –º–Ω–µ –æ–±—É—á–µ–Ω–∏–µ–º, –¥–æ–±–∞–≤–∏–≤ —Å–≤–æ–π —Ñ–∞–π–ª, –∏–ª–∏ —è –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ç–µ–±—è –≤–æ–ø—Ä–æ—Å", \
        reply_markup=menu_kb)
    


# –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ –º–µ–Ω—é     

@router.message(UserState.menu_state)
async def handle_menu(msg: Message, state: FSMContext):
    await state.set_state(UserState.menu_state)
    await msg.answer(text="–ü—Ä–∏–≤–µ—Ç üñêÔ∏è. –¢—ã –º–æ–∂–µ—à—å –ø–æ–º–æ—á—å –º–Ω–µ –æ–±—É—á–µ–Ω–∏–µ–º, –¥–æ–±–∞–≤–∏–≤ —Å–≤–æ–π —Ñ–∞–π–ª, –∏–ª–∏ —è –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ç–µ–±—è –≤–æ–ø—Ä–æ—Å", \
        reply_markup=menu_kb)



# –ü–µ—Ä–µ—Ö–æ–¥ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å—Ç–∞—Ä—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫–æ–º–∞–Ω–¥—ã

@router.message(UserState.start_state)
async def handle_start_button(msg: Message, state: FSMContext):
    await msg.answer(text="–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å, —è –ø–æ–º–æ–≥—É –Ω–∞ –Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∏—Ç—å üßê")
    await state.set_state(UserState.answer_state)

    
# –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

@router.message(UserState.answer_state, F.text)
async def generate_answer(msg: Message, state: FSMContext):
    
    ans = get_c(msg.text) 
    ans.replace("</s>", "").replace("<s>", "").replace("</unk>", "").replace("<unk>", "").\
            replace("</n>", "").replace("<n>", "")
    splitted_text = split_text(ans)
    
    await state.set_state(UserState.start_state)
    
    gen_msg = await msg.answer(
        "–ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ, —è –≥–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç... üïê"
    )
    
    await gen_msg.edit_text(f"<h1>–û—Ç–≤–µ—Ç: <h1>")
    for i in range(len(splitted_text)):
        await msg.answer(f"{splitted_text[i]}")
    
    await msg.answer("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–¥–∞—Ç—å –ø–æ—Ö–æ–∂–∏–π –≤–æ–ø—Ä–æ—Å", reply_markup=restart_kb)



# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞

@router.message(UserState.download_state, F.document)
async def handle_file(msg: Message, state: FSMContext):
    file_id_doc = msg.document.file_id
    file = await msg.bot.get_file(file_id_doc)
    file_path = file.file_path
    local_path = f"./data/{msg.document.file_name}"
    
    if os.path.exists(local_path) == False:
        await msg.bot.download_file(file_path, local_path)
        await msg.answer("–î–æ–±–∞–≤–∏–ª–∞, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ... üëâüèªüëàüèª", reply_markup=return_kb)
    else:
        await msg.answer("–£–ø—Å, —Ç–∞–∫–æ–π —Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª",
                         reply_markup=return_kb)
    